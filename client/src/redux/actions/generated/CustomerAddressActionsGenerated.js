/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN CustomerAddressActionsGenerated.js PLEASE EDIT ../CustomerAddressActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import CustomerAddressApi from "../../../api/CustomerAddressApi";

let actionsFunction = {

  //CRUD METHODS

  // Create customeraddress
  createCustomerAddress: function(customeraddress) {
    return function(dispatch) {
      return CustomerAddressApi
        .createCustomerAddress(customeraddress)
        .then(customeraddress => {
          dispatch(actionsFunction.createCustomerAddressSuccess(customeraddress));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createCustomerAddressSuccess: function(customeraddress) {
    return { type: types.CREATE_CUSTOMERADDRESS_SUCCESS, payload: customeraddress };
  },


  // Delete customeraddress
  deleteCustomerAddress: function(id) {
    return function(dispatch) {
      return CustomerAddressApi
        .deleteCustomerAddress(id)
        .then(customeraddress => {
          dispatch(actionsFunction.deleteCustomerAddressSuccess(customeraddress));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteCustomerAddressSuccess: function(customeraddress) {
    return { type: types.DELETE_CUSTOMERADDRESS_SUCCESS, payload: customeraddress };
  },


  // Find by addresstypeID
  findByaddresstypeID: function(key) {
    return function(dispatch) {
      return CustomerAddressApi
        .findByaddresstypeID(key)
        .then(item => {
          dispatch(actionsFunction.findByaddresstypeIDSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByaddresstypeIDSuccess: function(item) {
    return { type: types.FINDBYADDRESSTYPEID_CUSTOMERADDRESS_SUCCESS, payload: item };
  },


  // Get customeraddress
  loadCustomerAddress: function(id) {
    return function(dispatch) {
      return CustomerAddressApi
        .getOneCustomerAddress(id)
        .then(customeraddress => {
          dispatch(actionsFunction.loadCustomerAddressSuccess(customeraddress));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadCustomerAddressSuccess: function(customeraddress) {
    return { type: types.GET_CUSTOMERADDRESS_SUCCESS, payload: customeraddress };
  },

  // Load  list
  loadCustomerAddressList: function() {
    return function(dispatch) {
      return CustomerAddressApi
        .getCustomerAddressList()
        .then(list => {
          dispatch(actionsFunction.loadCustomerAddressListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadCustomerAddressListSuccess: function(list) {
    return { type: types.LIST_CUSTOMERADDRESS_SUCCESS, payload: list };
  },

	
  // Save customeraddress
  saveCustomerAddress: function(customeraddress) {
    return function(dispatch) {
      return CustomerAddressApi
        .saveCustomerAddress(customeraddress)
        .then(customeraddress => {
          dispatch(actionsFunction.saveCustomerAddressSuccess(customeraddress));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveCustomerAddressSuccess: function(customeraddress) {
    return { type: types.UPDATE_CUSTOMERADDRESS_SUCCESS, payload: customeraddress };
  },


};

export default actionsFunction;
